# -*- coding: utf-8 -*-
"""House Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E3x-qI-9XS-Y0Q3KyzIOllEQnONHjCUd
"""

import numpy as np 
import pandas as pd 

from sklearn.impute import SimpleImputer

from sklearn.preprocessing import OneHotEncoder

from sklearn.preprocessing import StandardScaler

from sklearn.model_selection import train_test_split

#model assembler
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV

#model evaluator
from sklearn.metrics import mean_squared_error

train = pd.read_csv('train.csv')
predict = pd.read_csv('test.csv')

train.head()

train.describe()

#all catagorical variables dropped
train = train.drop(['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour',
       'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood',
       'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle',
       'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',
       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',
       'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating',
       'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',
       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish',
       'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence',
       'MiscFeature', 'SaleType', 'SaleCondition'], axis = 1)
predict = predict.drop(['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour',
       'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood',
       'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle',
       'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',
       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',
       'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating',
       'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',
       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish',
       'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence',
       'MiscFeature', 'SaleType', 'SaleCondition'], axis = 1)

sample_submission = pd.read_csv('sample_submission.csv')
sample_submission.head()

y = train['SalePrice']
# only X - no Id, no y
X = train.drop(['Id', 'SalePrice'], axis = 1)

X_predict = predict.drop(['Id'], axis = 1)

num_type = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
num_var = X.select_dtypes(include = num_type).columns.values
num_var

category_var = X.select_dtypes(exclude = num_type).columns.values
category_var

X.columns[X.isnull().any()]

X.isnull().sum()

#simple imputer declared
num_impute = SimpleImputer(strategy = 'median')

#calculate the mean for the variables
num_impute.fit(X[num_var])

X[num_var] = num_impute.transform(X[num_var])

X_predict[num_var] = num_impute.transform(X_predict[num_var])

X.columns[X.isnull().any()]

num_scale = StandardScaler()

num_scale.fit(X[num_var])

X[num_var] = num_scale.transform(X[num_var])

X_predict[num_var]=num_scale.transform(X_predict[num_var])

X.head()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)

rf = RandomForestRegressor(n_estimators = 10, max_depth = 6, random_state = 0)

rf.fit(X_train, y_train)

#train dataset
train_predict = rf.predict(X_train)
train_predict

#test datset
test_predict = rf.predict(X_test)
test_predict

#predict prices
predictions = rf.predict(X_predict)
predictions

#create data file
rf_sub = pd.DataFrame({
    'Id' :  predict['Id'],
    'SalePrice' : predictions
})
rf_sub.head()

#exports the file and all of the data in it
rf_sub.to_csv('Data_Tested.csv', index = False)